% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ToXL.R
\name{ToXL}
\alias{ToXL}
\title{Transfer Data to Excel}
\usage{
ToXL(x, at, ..., xl = DescToolsOfficeOptions("lastXL"))
}
\arguments{
\item{x}{is a data.frame to be transferred to MS-Excel. If data is missing a
new file will be created.}

\item{at}{can be a range adress as character (e.g. \code{"A1"}), a vector of
2 integers (e.g \code{c(1,1)}) or a cell object as it is returned by
\code{xl$Cells(1,1)}, denominating the left upper cell, where the data.frame
will be placed in the MS-Excel sheet.}

\item{\dots}{further arguments are not used.}

\item{xl}{the pointer to a MS-Excel instance. An new instance can be created
with \code{GetNewXL()}, returning the appropriate handle. A handle to an
already running instance is returned by \code{GetCurrXL()}.  Default is the
last created pointer stored in \code{DescToolsOfficeOptions("lastXL")}.}
}
\value{
the name/path of the temporary file edited in MS-Excel.
}
\description{
\code{ToXL()} is used to export data frames or vectors directly to MS-Excel,
without export the data to a csv-file and import it on the XL side. So it it
possible to export several data.frames into one Workbook and edit the tables
after ones needs.
}
\note{
The function works only in Windows and requires \bold{RDCOMClient} to
be installed (see: Additional_repositories in DESCRIPTION of the package).
}
\examples{

\dontrun{
# Windows-specific example
XLView(d.diamonds)

# edit an existing data.frame in MS-Excel, make changes and save there, return the filename
fn <- XLView(d.diamonds)
# read the changed file and store in new data.frame
d.frm <- read.table(fn, header=TRUE, quote="", sep=";")

# Create a new file, edit it in MS-Excel...
fn <- XLView()
# ... and read it into a data.frame when in R again
d.set <- read.table(fn, header=TRUE, quote="", sep=";")

# Export a ftable object, quite elegant...
XLView(format(ftable(Titanic), quote=FALSE), row.names = FALSE, col.names = FALSE)


# Export a data.frame directly to XL, combined with subsequent formatting

xl <- GetNewXL()
owb <- xl[["Workbooks"]]$Add()
sheet <- xl$Sheets()$Add()
sheet[["name"]] <- "pizza"

ToXL(d.pizza[1:10, 1:10], xl$Cells(1,1))

obj <- xl$Cells()$CurrentRegion()
obj[["VerticalAlignment"]] <- xlConst$xlTop

row <- xl$Cells()$CurrentRegion()$rows(1)
# does not work:   row$font()[["bold"]] <- TRUE
# works:
obj <- row$font()
obj[["bold"]] <- TRUE

obj <- row$borders(xlConst$xlEdgeBottom)
obj[["linestyle"]] <- xlConst$xlContinuous

cols <- xl$Cells()$CurrentRegion()$columns(1)
cols[["HorizontalAlignment"]] <- xlConst$xlLeft

xl$Cells()$CurrentRegion()[["EntireColumn"]]$AutoFit()
cols <- xl$Cells()$CurrentRegion()$columns(4)
cols[["WrapText"]] <- TRUE
cols[["ColumnWidth"]] <- 80
xl$Cells()$CurrentRegion()[["EntireRow"]]$AutoFit()

sheet <- xl$Sheets()$Add()
sheet[["name"]] <- "whisky"
ToXL(d.whisky[1:10, 1:10], xl$Cells(1,1))}

}
\seealso{
\code{\link{GetNewXL}}, \code{\link{XLGetRange}},
\code{\link{XLGetWorkbook}}
}
\author{
Andri Signorell \href{mailto:andri@signorell.net}{andri@signorell.net}, \code{ToXL()} is based on
code of Duncan Temple Lang \href{mailto:duncan@r-project.org}{duncan@r-project.org}
}
\keyword{manip}
